module VotingSystem::BlockchainVoting {
    use aptos_framework::signer;
    use aptos_framework::coin;
    use aptos_framework::aptos_coin::AptosCoin;

    /// Struct to store voting details.
    struct Voting has store, key {
        option_a_votes: u64,  // Votes for option A
        option_b_votes: u64,  // Votes for option B
        reward: u64,          // Reward tokens for participating in the vote
    }

    /// Initialize a new voting with a reward for participants.
    public entry fun create_voting(owner: &signer, reward: u64) {
        let voting = Voting {
            option_a_votes: 0,
            option_b_votes: 0,
            reward,
        };
        move_to(owner, voting);
    }

    /// Submit a vote for either option A or option B.
    public entry fun submit_vote(voter: &signer, voting_owner: address, option: u8) acquires Voting {
        let voting = borrow_global_mut<Voting>(voting_owner);

        // Increment the vote count based on the chosen option
        if (option == 0) {
            voting.option_a_votes = voting.option_a_votes + 1;
        } else if (option == 1) {
            voting.option_b_votes = voting.option_b_votes + 1;
        } else {
            // Invalid option, do nothing
            return;
        }

        // Reward the voter with tokens
        let reward_amount = voting.reward;
        let reward = coin::withdraw<AptosCoin>(voting_owner, reward_amount);
        coin::deposit<AptosCoin>(signer::address_of(voter), reward);
    }
}
